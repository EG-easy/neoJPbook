= スマートコントラクト
#@#担当者:@genm

スマートコントラクトの概念自体は、ビットコインが生まれる前から存在しており、
1990年代に暗号学者のNick Szaboによって提唱されたのが始まりです。
Nick Szaboは、スマートコントラクトの例として自動販売機を挙げています。
自動販売機は、「ユーザが必要な金額を自動販売機に導入する」
「ユーザが購入したい商品のボタンを押す」という２つの条件が満たされたときに
「ユーザに商品を提供する」という売買契約が自動的に行われます。
このように、あらゆる契約行動を当事者の関与無しに自動的に実行されるように定義し、
契約そのものが執行を実行するという概念が、広義のスマートコントラクトとして知られています。

本章では、狭義のスマートコントラクトとして「ブロックチェーン上で動作する契約の自動執行プログラム」と定義します。

#@# 契約の段階で、あらかじめ執行

#@# 権利の売買や交換に関しても、取引の情報をブロックに書き込んでしまえば、誰から誰に所有権が
#@# 移ったのかが明らかになります。
#@# また、一度書き込んでしまえばブロックチェーンの特性から改ざんが困難な契約・取引が可能となります。


#@# スマートコントラクトを利用すると、ゲーム上でユーザが自由に売買できる
#@# アイテムの作成などが可能になります。
#@# 中間

#@# スマートコントラクトの既存のビジネスのやり取りを

#@# #@# TODO: です。

#@# 契約における中間者が必要無くなる


#@# NEOのスマートコントラクト
#@# The Daoのハッキング事件からも
#@# dAppのディベロッパーは堅牢なスマートコントラクトを書く責務があります。



== NEO Smart Contract 2.0
#@# Ethereumを代表として、スマートコントラクトは
#@# スマートコントラクトにおける、NEOとEthereumの違いはどこにあるしょうか。

#@# NEOでは、堅牢性、高パフォーマンス、拡張性をもつように設計されています。
#@# コントラクトのタイプは、バリデーションコントラクト（Validation Contract）、

#@# NEOのスマートコントラクトは、NeoVMによって実行されています。
#@# NeoVMは、スマートコントラクトを実行するためのバーチャルマシンです。
#@# NEOでは、作成したスマートコントラクト


== スマートコントラクトの対応言語
NEOでは、作成したスマートコントラクトをコンパイルし、共通の命令言語に変換してから
NeoVMに渡すため、複数の言語に対応しています。

現在、NEOでは次の言語に対応しています。

 * C#, VB.Net, F#
 * Java, Kotlin
 * Python
 * Golang
 * Javascript / Typescript
 

#@# TODO: ミニマム版ではNeoVMについて深く言及しない

#@# == スマートコントラクトの種類


== スマートコントラクトの実例
本節では、NEOのスマートコントラクトを使用した実例を紹介します。

=== 音楽コンテンツの直接配信
アーティストのコンテンツ配信にも、スマートコントラクトが応用されています。
現状では、コンテンツ制作者がレーベル会社と契約を締結することで、
レーベル会社がコンテンツ制作者とエンドユーザ間の仲介をしています。
レーベル会社中間マージンが差し引かれたものがコンテンツ制作者に支払われる仕組みになっています。
これに対し、imusify（イミューシファイ）では、スマートコントラクト上に
することで、レーベル会社といった中間業者を介さずにエンドユーザを1対1で

コンテンツ制作者であるアーティストとエンドユーザを直接結びつけています。


=== 権利の検証
zeepinでは、クリエイターの権利を保護するためにスマートコントラクトが応用されています。
#@# TODO: zeepin上に投稿されたコンテンツが保護され、それを第三者が活用できた気がする

にもスマートコントラクトが活用されています。


== 手数料形態
スマートコントラクトには、デプロイコスト（deployment costs）と実行コスト（execution costs）の
二種類の手数料が設定されています。 
#@# FIXME:設定ではなく、ブロックチェーンが決める

#@# TODO:ブロックチェーンを自分で立ち上げる際には、この値は変更が可能です。

スマートコントラクトの実行や
現在のNEOブロックチェーンでは、毎回のスマートコントラクトの実行に対し10GAS分の無料枠が設定されています。
このため、10GASを超えないスマートコントラクトの実行には手数料が発生しません。

スマートコントラクトが実行される際に呼び出されるシステムコールの種類と数によって、
スマートコントラクトの実行コストは決定されます。

つぎの@<table>{smartcontract-fees}にスマートコントラクトの手数料を示します。
この他にも、スマートコントラクトの呼び出しを優先的に行うために、ユーザは追加で任意の手数料(1GAS〜)を支払うことができます。

//table[smartcontract-fees][システムコールに対する手数料]{
Runtime.CheckWitness	0.2
Blockchain.GetHeader	ヘッダーの取得	0.1
Blockchain.GetBlock	ブロック情報の取得	0.2
Blockchain.GetTransaction	トランザクション情報の取得	0.1
Blockchain.GetAccount	アカウント情報の取得	0.1
Blockchain.GetValidators	バリデーターの取得	0.2
Blockchain.GetAsset	アセットの取得	0.1
Blockchain.GetContract	コントラクト情報の取得	0.1
Transaction.GetReferences	参照の取得	0.2
Account.SetVotes	投票	1
Validator.Register	バリデーターの登録	1000
Asset.Create (system asset)	アセットの作成	5000
Asset.Renew (system asset) [per year]	アセットの更新(年)	5000
Contract.Create	スマートコントラクトの作成	100~1000
Contract.Migrate	スマートコントラクトのデプロイ	100~1000	
Storage.Get	ブロックチェーン上のストレージからデータを取得	0.1	
Storage.Put	[per KB]*	ストレージにデータを書き込む(KB毎)	1
Storage.Delete	ストレージのデータを削除	0.1
(Default)	必ず発生する手数料	0.001
//}


スマートコントラクトのデプロイ時に必要な手数料は100~1000GASとなっています。
この手数料は、スマートコントラクトをブロックチェーンにデプロイする通常手数料100GASに加えて、
定義したスマートコントラクトがストレージ領域やダイナミックコールを使用するか否かによって変動します。
例えば、そのスマートコントラクトがストレージ領域を必要とするのであれば追加で400GAS、通常手数料と合わせて合計500GASが必要です。
また、コントラクト内で他のスマートコントラクトを呼び出すダイナミックコールを必要とするのであれば追加で500GAS、通常手数料と合わせて合計600GASが必要です。
ストレージ領域とダイナミックコールを両方とも必要とするのであれば、手数料は合計で1000GASになります。

ちなみに、実際にスマートコントラクトをデプロイする際には、上記の手数料から無料枠10GAS分を差し引いたものが請求されます。


== コントラクトの操作


== コントラクトのトリガー
#@# NEOのスマートコントラクトが呼び出されるトリガー


//table[envvars][重要な環境変数]{
 	Verification	Application	VerificationR	ApplicationR
-------------------------------------------------------------
名称	Verification trigger
呼び出されるタイミング	トランザクションを送信した際に呼び出される

//}
