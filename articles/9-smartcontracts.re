= スマートコントラクト
#@#担当者:@genm

スマートコントラクトの概念自体は、ビットコインが生まれる前から存在しており、
1990年代に暗号学者のNick Szaboによって提唱されたのが始まりとされています。
Nick Szaboは、スマートコントラクトの例として自動販売機を挙げています。
自動販売機は、「ユーザが必要な金額を自動販売機に導入する」
「ユーザが購入したい商品のボタンを押す」という２つの条件が満たされたときに
「ユーザに商品を提供する」という売買契約が自動的に行われます。
このように、あらゆる契約行動を当事者の関与無しに自動的に実行されるように定義し、
契約そのものが執行を実行するという概念が、広義のスマートコントラクトとして知られています。

本書では、狭義のスマートコントラクトとして「ブロックチェーン上で動作する契約の自動執行プログラム」と定義します。

== NEO Smart Contract 2.0
NEOは、堅牢性、高パフォーマンスを重視し、さらに拡張性をもつように設計されています。
#@# コントラクトのタイプは、バリデーションコントラクト（Validation Contract）、ファンクションコントラクト（function contracts）、アプリケーションコントラクト（application contracts）に分類されます。

パフォーマンスの観点から、NEOではスマートコントラクトの実行環境として、NeoVM（NEO Virtual Machine）を使用しています。
NeoVMは軽量かつ高速に起動することから、スマートコントラクトのような短いプログラムには適しており、JITと呼ばれるリアルタイムコンパイラによって、
スマートコントラクトを環境に合わせてコンパイルしています。

スマートコントラクトをブロックチェーン上に展開し、利用可能な状態にすることをデプロイ（Deploy）といいます。
展開されたスマートコントラクトは、スクリプトハッシュと呼ばれる文字列に紐付けられ、以降はスクリプトハッシュを介してスマートコントラクトを呼び出せるようになります。

NEOは、NeoVMによって外部とのデータのやり取りができるように設計されており、スマートコントラクト内で外部システムや他のブロックチェーンのデータにアクセスが可能です。
また、NeoVMはAPIを介してブロックチェーンの操作やスマートコントラクトの情報の取得を可能にしています。
詳細は@<href>{http://docs.neo.org/en-us/sc/reference/api.html}を参照してください。

==[column] スマートコントラクトの変更について
ブロックチェーン上に展開されたスマートコントラクトは、たとえ定義した本人であっても後からルールを変更する事はできないように設計されています。
一度公開したプログラムが修正できないという制約に最初は抵抗を感じるかもしれません。
しかし、スマートコントラクトが契約そのものであるならば当たり前のことです。
現実世界において、一度規定し誰かが施行している可能性のある契約を、都合が悪いから変更するという行為は許されることではありません。
内容の変更を要する場合であれば、契約内容を修正した書類などを新たに用意して、現行の契約の代わりに新しい契約に同意してもらう必要があります。
ブロックチェーンにおいてもこれは同じで、内容に変更を加える場合には修正したスマートコントラクトを別のスマートコントラクトとして新たに展開する必要があります。


== スマートコントラクトの対応言語
NEOでは、作成したスマートコントラクトをコンパイルし、共通の命令言語に変換してから
NeoVMに渡すため、複数の言語に対応しています。

現在、NEOでは次の言語に対応しています。

 * C#, VB.Net, F#
 * Java, Kotlin

その他にも、City of Zionの提供するSDKによって次の言語でもスマートコントラクトの記述が可能となっています。
ただし、これらの言語では対応状況によって、NEOの正式に対応している言語よりも制約がある場合が多いです。

 * Python
 * Javascript, Typescript
 * Go


#@# TODO: ミニマム版ではNeoVMについて深く言及しない

#@# == スマートコントラクトの種類


== スマートコントラクトの実例
本節では、NEOのスマートコントラクトを使用した実例を紹介します。

=== 音楽コンテンツの自己出版
アーティストのコンテンツ配信にも、スマートコントラクトが応用されています。
現状の音楽コンテンツは、アーティストがレーベル会社と契約を締結することで、コンテンツ配信企業がエンドユーザにコンテンツを届けるという構造になっています。
これに対してimusify（@<href>{https://imusify.com}）では、ブロックチェーン上に音楽コンテンツを自己出版できる音楽経済プラットフォームを構築しています。
このプラットフォームでは、アーティストはレーベル会社といった中間業者無しに、所有権を明確にしたままコンテンツをエンドユーザーに販売することが可能となっています。
また、今後のロードマップではアーティスト同士のコラボレーションやチケットの販売、クラウドファンディングなどが可能になる見込みです。

=== コンテンツ作成者・所有者の管理と証明
Red Pulse（@<href>{https://www.redpulse.com}）は、中国市場に関する質の高い情報を、経済に関心をもつ投資家やアナリスト、アドバイザーに提供することを目指した事業です。
Red Pulseの提供するプラットフォームでは、投稿されたコンテンツに対して作成者や所有者といった情報がスマートコントラクトによりブロックチェーン上に記録されます。
スマートコントラクトを介してブロックチェーン上にデータを読み書きすることによって、透明性の高く信頼性のある権利の証明や管理を可能にしています。

== 手数料形態
スマートコントラクトを実行する際には、手数料としてGASをブロックチェーンに対して支払う必要があります。
手数料はスマートコントラクトの実行時に呼び出されるNeoVMのシステムコールの種類と数によって決定されますが、
現在のNEOブロックチェーンでは、毎回のスマートコントラクトの実行に対し10GAS分の無料枠が設定されています。
このため、10GASを超えないスマートコントラクトの実行には手数料が発生しません。
システムコールに対する手数料は、@<table>{gas}に示すとおりです。
この他にも、スマートコントラクトの呼び出しを優先的に行うために、ユーザは追加で任意の手数料(1GAS〜)を支払うことができます。

//imgtable[gas][システムコールに対する手数料]{
//}

#@# //table[smartcontract-fees][システムコールに対する手数料]{
#@# システムコール	手数料(GAS)
#@# ---------------------------------
#@# Runtime.CheckWitness	0.2
#@# Blockchain.GetHeader	ヘッダーの取得	0.1
#@# Blockchain.GetBlock	ブロック情報の取得	0.2
#@# Blockchain.GetTransaction	トランザクション情報の取得	0.1
#@# Blockchain.GetAccount	アカウント情報の取得	0.1
#@# Blockchain.GetValidators	バリデーターの取得	0.2
#@# Blockchain.GetAsset	アセットの取得	0.1
#@# Blockchain.GetContract	コントラクト情報の取得	0.1
#@# Transaction.GetReferences	参照の取得	0.2
#@# Account.SetVotes	投票	1
#@# Validator.Register	バリデーターの登録	1000
#@# Asset.Create (system asset)	アセットの作成	5000
#@# Asset.Renew (system asset) [per year]	アセットの更新(年)	5000
#@# Contract.Create	スマートコントラクトの作成	100~1000
#@# Contract.Migrate	スマートコントラクトのデプロイ	100~1000	
#@# Storage.Get	ブロックチェーン上のストレージからデータを取得	0.1	
#@# Storage.Put	[per KB]*	ストレージにデータを書き込む(KB毎)	1
#@# Storage.Delete	ストレージのデータを削除	0.1
#@# (Default)	必ず発生する手数料	0.001
#@# //}

==[column] デプロイに必要な手数料
スマートコントラクトのデプロイ時に必要な手数料は100~1000GASとなっています。
この手数料は、スマートコントラクトをブロックチェーンにデプロイする通常手数料100GASに加えて、
定義したスマートコントラクトがストレージ領域やダイナミックコールを使用するか否かによって変動します。
例えば、そのスマートコントラクトがストレージ領域を必要とするのであれば追加で400GAS、通常手数料と合わせて合計500GASが必要です。
また、コントラクト内で他のスマートコントラクトを呼び出すダイナミックコールを必要とするのであれば追加で500GAS、通常手数料と合わせて合計600GASが必要です。
ストレージ領域とダイナミックコールを両方とも必要とするのであれば、手数料は合計で1000GASになります。
なお、実際にスマートコントラクトをデプロイする際には、上記の手数料から無料枠10GAS分を差し引いたものが請求されます。


#@# == コントラクトの操作

#@# == コントラクトのトリガー
#@# #@# NEOのスマートコントラクトが呼び出されるトリガー


#@# //table[envvars][重要な環境変数]{
#@#  	Verification	Application	VerificationR	ApplicationR
#@# -------------------------------------------------------------
#@# 名称	Verification trigger
#@# 呼び出されるタイミング	トランザクションを送信した際に呼び出される

#@# //}
