= NEP
#@#担当者:@ 南口
#@# 現時点の文字数は、5335文字です。4500文字ちょっとになるように無駄を省き、内容を調整するつもりです。
この章では、NEPの概要とその出し方、実際のNEPについて解説します。


== NEPの概要
NEPとは、NEO Enhancement Proposalの略称であり、NEOを利用するコミュニティに対して情報を提供したり、NEOやその実装環境の新しい特徴について言及するためにデザイン（設計）されたドキュメントのことを表します。
NEPでは、内容が簡潔で技術的に明記されること、およびその根拠が示されることが求められます。
さらに、NEPの著者には、コミュニティ内でコンセンサス（同意）を形成しつつ、反対意見についてもドキュメント化する責任があります。


== NEPの理念
NEPは、NEOの新しい特徴やNEOコミュニティのインプットを集めイシュー（議題）化したり、NEOに実装された既存デザインをドキュメント化するための重要なメカニズムです。
そのため、NEPはNEOを実装する者にとってその環境を確認できる便利な方法といえます。
理想は、NEOを実装する環境を改善したユーザーが、自分の完了させたNEPをリスト化することです。
これによって、エンドユーザーはNEOの実装やライブラリーに関する現状を簡単に理解することができるようになります。


== NEPのタイプ
NEPには、3つの型（タイプ）があります。

=== スタンダードトラック型NEP
スタンダードトラック（Standards Track）型NEPは、NEOの実装環境の大部分または全部に影響を与える何かしらの変更について言及しています。
たとえば、ネットワークプロトコルに対する変更、ブロックやトランザクションの評価ルールにおける変更、アプリケーションの標準（standards）/系統（conventions）の提案、その他のNEOを用いたアプリケーションの相互運用性に影響を与えるあらゆる変更内容や追加機能についてです。

=== インフォーメーション型NEP
インフォーメーション（Information）型NEPは、新しい特徴を提案しませんが、NEOの既存デザインに関するイシューを書き起こしたり、NEOコミュニティに対して一般的なガイドラインや情報を提供しています。また、インフォーメーション型NEPでは、必ずしもNEOコミュニティに対してコンセンサスやレコメンデーション（推奨）は表明されなくてもよいので、ユーザーがそのアドバイスに従う義務は特にありません。

=== メタ型NEP
メタ（Meta）型NEPは、NEOを取り巻くプロセスや環境について書き起こしたり、その変更について提案しています。
たとえば、手続きやガイドライン、意思決定プロセスに対する変更、NEOの開発ツールや開発環境に対する変更です。
スタンダードトラック型NEPと違うのは、NEOのプロトコル自体を超える領域に対応している点です。
また、インフォーメーション型NEPとは違い、メタ型NEPは、変更を提案することもありますが、NEOのコードベースに対してではないので、コミュニティのコンセンサスが求められる場合が多いです。
そのため、メタ型NEPでは、アドバイスはレコメンデーション以上のものであり、基本的にユーザーはそれに従う義務があります。


== NEPの出し方

=== 始まりのアイデア
NEPを出すプロセスは、NEOへの新しいアイデアから始まります。
まず、NEPは、キーとなる提案や新しいアイデアをひとつ含んでいることが強く求められます。
さらに、NEPが必要とされるのは、単一のクライアントに対する変更ではなく、複数のクライアントに影響を及ぼしたり、複数のアプリケーションで利用される標準を定義する変更の場合です。
そのため、NEPの編集者（エディター）は、あまりにも焦点を絞り切れておらず範囲が広いと思われる提案を拒否する権利をもっています。
もしNEPの提案内容が疑わしいならば、焦点の絞られたいくつかのNEPに分けることが好ましいとされます。

=== 牽引者の必要
NEPは、牽引者（チャンピョン）を持たなければなりません。
牽引者とは、後述する形式（スタイル）と書式（フォーマット）を用いてNEPについて書き起こし、公開されている適切な議論を追って、そのアイデアに関わるコンセンサスを形成しようとする人のことをいいます。

=== アイデアの公開
リスクをとって事前にアイデアを公開すると、NEPを執筆する際に潜在的に必要な時間を節約できます。
本来、公開された既存の議論にのっとってアイデアが拒否されないようにするには、インターネットで調べるだけでは足りず、大量の労力や時間を割かなければなりません。
そこで、アイデアが独創的である場合に、はじめにNEOコミュニティにそれを確認することで、その労力や時間を節約できます。
また、そうすることで、著者だけでなくコミュニティ全体にとっても、アイデアの有用性を確かめることに役立ちます。

=== プルリクエスト
NEOコミュニティに対して、牽引者がアイデア承認の可否を確認できれば、草稿状態のNEPは次にプルリクエストとして提出される必要があります。
これによって、NEPの著者は草稿状態のNEPを断続的に編集でき、追加で外部から寄せられるコメントとともに、アイデアに対する関心や反応に対処することができます。

=== 番号・ラベル・ステータス
NEPの協力者（コラボレーター）が承認すれば、著者はそのNEPに番号をつけ、スタンダードトラック型・インフォーメーション型・メタ型のどれかにラベリングし、「Draft（草稿状態）」とステータスを決めた後に、gitのレポジトリに追加します。
NEPの編集者は、理由なしにNEPを否定することはありません。
NEPのステータスを否定する理由としては、アイデアが重複していること、技術的に不十分なこと、適切な動機付けと下位互換性への対処が提供されていないこと、NEOの理念を無視していることなどが挙げられます。

=== スタンダードトラック型NEPの出し方
スタンダードトラック型NEPをだすプロセスは、デザインドキュメント・実装（インプリメンテーション）・最終的な公式仕様へのアップデートという、３つのパートから構成されます。
まず、NEPは、実装されることによってその学習が促進される場合をのぞいて、実装パートの前にレビューと承認を受けなければなりません。
さらに、最終の公式仕様へのアップデートの前には、コードやパッチ、URLなどの形式で、実装パートが含まれていることが求められます。

=== 承認の条件
NEPが承認されるためには、最低でも次の基準が満たされなければなりません。

  * NEPで提案される改善内容が明確で完璧に説明されていること。
  * その改善によって、正味で向上する内容が表現されていること。
  * そのアイデアの実装が、堅実でなもので、プロトコルを複雑化しすぎないようになっていること。

=== 承認とステータス
NEPの承認の可否によって想定されるステータスの変化と状態を@<img>{nep_status}に示します。

//image[nep_status][NEPのステータスの分岐][scale=0.8]{

//}

ここでは、主要なステータスについて説明します。
NEPが承認されると、その実装も完了される必要があります。
そして、実装がコミュニティに受け入れられると、NEPのステータスは「Final（最終状態）」に変えられます。
また、NEPには「Draft」と「Final」以外にも「Deferred（繰越状態）」というステータスをつけることができます。
これは、該当するNEPに一切の進捗が生まれていない場合につけられます。
NEPのステータスがいったん「Deferred」になっても、編集者はそれを「Draft」に戻すことができます。
NEPが「Rejected（拒否された状態）」というステータスになった場合、それはいいアイデアではなかったということになります。
インフォーメーション型NEPとメタ型NEPの場合に、決して完了することがないNEPに対して「Active（アクティブな状態）」というステータスがつけられることがあります。
また、NEPは異なるNEPや古いNEPから置き換えることもでき、その場合には「Replaced（置き換えられた状態）」というステータスが既存のNEPにつきます。

=== NEPを出す書式とテンプレート
NEPを出す際には、守らなければならない書式やテンプレートがあります。
まず、NEPを出すためには、メディアウィキ（mediawiki）またはマークダウン（markdown）の形式を用いる必要があります。
さらに、イメージファイルがサブディレクトリに含まれることも必要とされます。
以降では、NEPを出す際の前文で必要なフォーマットとテンプレートについて説明していきます。

==== NEPの前文
実際のNEP5では次のような前文が表示されています。

//emlist[ ]{  NEP: 5
  Title: Token Standard
  Author: Tyler Adams <lllwvlvwlll@gmail.com>, luodanwg <luodan.wg@gmail.com>, tanyuan <tanyuan666@gmail.com>, Alan Fong <anfn@umich.edu>
  Type: Standard
  Status: Final
  Created: 2017-08-10
//}
@<br>{}

このように、NEPはRFC 822形式のヘッダーで前文を記載して始まらなければならず、次のような順番で表示されることが求められます。
ただし、*印のついたヘッダーはオプション（選択可能）ですが、他のヘッダーは記載が必要とされます。

//emlist[ ]{  NEP: <NEP number>(this is determined by the NEP editor)
  Title: <NEP title>
  Author: <list of authors' real names and optionally, email address>
 *Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected | Withdrawn | Final | Superseded>
  Type: <Standard | Informational | Meta>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
 *Replaces: <NEP numbers>
 *Superseded-By: <NEP number>
 *Resolution: <url>
//}
@<br>{}

次のように、著者はヘッダーにおいて、NEPにおける全ての著者と管理者（オーナー）の名前を記載しなければなりません。
また、オプションですが、それぞれのEメールアドレスを記載することもあります。


//emlist[Eメールアドレスを記載する場合]{  Random J. User <address@dom.ain>
//}
@<br>{}

//emlist[Eメールアドレスを記載しない場合]{  Random J. User
//}
@<br>{}

「Resolution」のヘッダーはスタンダードトラック型NEPの場合のみ必要とされます。
その場合「Resolution」のヘッダーには、NEPに関する宣告が記載されたEメールメッセージを示すURLやその他のウェブリソースを含むこととされます。


またステータスが「Draft」である初めの期間などは、通常NEPは非公開で議論されています。
この場合、「Discussions-To」のヘッダーには、NEPが議論されているメーリングリストやURLを示すこととされています。
ただし、著者と私的にNEPの議論が行われている場合は、「Discussions-To」のヘッダーは必要とされません。


「Type」のヘッダーには、NEPのタイプ（スタンダードトラック型・インフォーメーション型・メタ型）を記載します。
「Created」のヘッダーには、NEPに番号がつけられたに日付を記録します。
たとえば、2001-08-14となります。


「Replaces」のヘッダーは既存のNEPを代替したNEPに求められ、ヘッダーにはそのNEPが代替した古いNEPの番号が記載されます。
「Superseded-By」のヘッダーは新しいドキュメントによって古くなったNEPに求められ、ヘッダーにはそのNEPに代わる新しいNEPが存在する数が記載されます。


== 実際のNEPに関する解説
#@# NEP1~NEP11やNeoID/NeoFS/NeoX/NeoQSなどの説明が考えられます。
実際のNEPのうちで代表的なものを次に例示します。

//table[identifier][実際のNEPの例]{
番号      タイトル                                 タイプ             ステータス
------------------------------------------------------------------------------------------
1         NEP Purpose and Guidelines             Meta              Active
2         Passphrase-protected private key       Standard          Final
3         NeoContract ABI                        Standard          Final
4         Dynamic Contract Invocation            Standard          Replaced
5         Token Standard                         Standard          Final
6         Wallet Standard                        Standard          Final
7         Triggers for NeoContract               Standard          Final
8         Stack Isolation for NeoVM              Standard          Final
9         URI Scheme                             Standard          Final
10        Composite Smart Contracts              Standard          Final
11        Non-fungible Token Standard            Standard          Accepted
          NeoID                                  Standard          Stub
          NeoFS                                  Standard          Stub
          NeoX                                   Standard          Stub
          NeoQS                                  Standard          Stub
//}
@<br>{}

この中でも、代表的なものとしてNEP5とNEP6を取り上げ概説します。
さらに、今後新しく実装される可能性の高いNEOXも取り上げて概説します。

=== NEP5
==== NEP5の概要
NEP5では、NEOのブロックチェーンによって、トークン化されたスマートコントラクトが統一的に対応する仕組みを可能にするトークン規格について概説されています。

==== NEP5の動機
NEOのブロックチェーンが拡大するにつれて、スマートコントラクトの配備と発動はますます重要になってきます。
しかし、各コントラクトが互いに対応する規格がなければ、互いに類似性を持っているはずのコントラクトそれぞれに特有なAPIに対して、メンテナンスが行われなければなりません。
トークン化されたコントラクトが動作する基本的な仕組みは全て同じなので、それ自体がこのメンテナンスの有効な実例となります。
そこで、トークンに対応する基本的な方法があれば、全体の仕組みの中で、トークンを利用するスマートコントラクト全てに求められる基本的な動作のメンテナンスを行わずに済みます。

=== NEP6
==== NEP6の概要
NEP6は、NEOが実装された環境間でウォレットファイルをシェア（共有）することを可能にするウォレット規格について説明されています。

==== NEP6の動機
現在、異なるクライアントプログラムが異なるウォレットファイルを生成しています。
そのため、これらのファイルの形式と保存方法、暗号化方法は全て異なっており、ユーザーにとっては、異なるクライアントプログラム間を移動することが難しく、プライベートキーを生成することで移動できた場合でも、複数のキーをもつ種々のウォレットは処理し切れません。
そこで、統一的なウォレットの形式が必要とされています。
これがあれば、ユーザーは、ウォレットのファイルを変えたりプライベートキーを生成する必要もなく、全てのプラットフォームを安全かつ簡単に移動できます。

=== NeoX
#@# 初心者にもわかりやすいように、NeoXの説明に例や図をたす予定です。
NeoXは、クロスチェーン型の相互運用性を実装するプロトコルです。
NeoXは2つのパートに分けられます。
ひとつ目は「クロスチェーン型資産交換プロトコル（cross-chain assets exchange protocol）」で、
ふたつ目は「クロスチェーン型分配取引プロトコル（cross-chain distributed transaction protocol）」です。

==== クロスチェーン型資産交換プロトコル
NeoXは、二本鎖で不可分な資産を交換する既存のプロトコルにまで拡張されました。
これは、複数のプラットフォーム参加者が異なるチェーン間で資産を交換できるようにするとともに、
トランザアクションの全プロセスの全ステップにおいて、片方のみが成功/失敗をすることなく、両方の資産交換者が結果を共有することを確実にするためです。


==== クロスチェーン型分配取引プロトコル
クロスチェーン型分配取引とは、トランザクションの複数のステップが異なるブロックチェーンを渡って散らばると同時に、
トランザクション全体の一貫性が確保されることを意味しています。
これはクロスチェーン型資産交換を拡張したものであり、資産交換という行いを任意なものへと拡張したといえます。
